{% comment %}
  Simple Pencil Embed - Basic iframe for testing
{% endcomment %}
<style>
  /* Make THIS section span all grid columns if it lives in a grid */
  #shopify-section-{{ section.id }} {
    grid-column: 1 / -1;   /* span from first to last column */
    justify-self: stretch; /* ensure it expands */
    width: 100%;
  }
  
  /* Loading spinner animation */
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>


<div style="
  width: 100%;
  min-width: 100%;
  height: {{ block.settings.height }}px;
  border: 1px solid #ccc;
  border-radius: 8px;
  overflow: hidden;
  margin: 20px 0;
  position: relative;
">
  <iframe
    id="pencil-designer-iframe"
    src="{{ block.settings.iframe_src | escape }}"
    style="width:100%;height:100%;border:0"
    loading="lazy"
  ></iframe>
  
  <div id="pencil-loading-overlay" style="
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    border-radius: 8px;
  ">
    <div style="
      text-align: center;
      padding: 20px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      border: 1px solid #e1e5e9;
    ">
      <div style="
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007acc;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 16px;
      "></div>
      <div style="
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 16px;
        font-weight: 500;
        color: #333;
        margin: 0;
      ">Loading...</div>
      <div style="
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 14px;
        color: #666;
        margin: 8px 0 0;
      ">Creating product and adding to cart</div>
    </div>
  </div>
</div>

<script>
(() => {
  const iframe = document.getElementById('pencil-designer-iframe');
  const loadingOverlay = document.getElementById('pencil-loading-overlay');
  
  const showLoading = () => {
    if (loadingOverlay) {
      loadingOverlay.style.display = 'flex';
    }
  };
  
  const hideLoading = () => {
    if (loadingOverlay) {
      loadingOverlay.style.display = 'none';
    }
  };

  // Add to cart and render drawer in one request
  async function addAndRenderDrawer({ id, quantity = 1, properties = {} }) {
    const sections = ['cart-icon-bubble', 'cart-drawer']; // confirm these names in your theme
    const url = `/cart/add.js?sections=${sections.join(',')}&sections_url=${
      encodeURIComponent(window.location.pathname)
    }`;

    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
      body: JSON.stringify({ items: [{ id: String(id), quantity, properties }] })
    });

    const data = await res.json();
    if (!res.ok) throw new Error(data?.description || 'Add to cart failed');

    // Update bubble (if you aren't already)
    const bubble = document.querySelector('[data-section-id="cart-icon-bubble"]') || document.getElementById('cart-icon-bubble');
    if (bubble && data.sections?.['cart-icon-bubble']) {
      bubble.innerHTML = data.sections['cart-icon-bubble'];
    }

    // Hand the drawer its HTML the *Dawn* way:
    const cartDrawer = document.querySelector('cart-drawer');
    if (cartDrawer && typeof cartDrawer.renderContents === 'function') {
      cartDrawer.renderContents(data); // <- key line; uses sections['cart-drawer']
    } else {
      // Fallback: replace the drawer DOM yourself
      const html = data.sections?.['cart-drawer'];
      if (html) {
        const doc = new DOMParser().parseFromString(html, 'text/html');
        const newDrawer = doc.querySelector('cart-drawer') || doc.body.firstElementChild;
        const oldDrawer = document.querySelector('cart-drawer') || document.querySelector('[data-section-id="cart-drawer"]');
        oldDrawer?.replaceWith(newDrawer);
      }
    }

    // Optional: open the drawer
    document.documentElement.dispatchEvent(new CustomEvent('cart:open'));

    return data;
  }


  let lastProcessedKey = null;
  let lastProcessedAt = 0;
  const ALLOWED_ORIGINS = (() => {
    try {
      const iframeSrc = iframe?.getAttribute('src');
      if (!iframeSrc) {
        return [];
      }
      const url = new URL(iframeSrc, window.location.href);
      return [url.origin];
    } catch (e) {
      return [];
    }
  })();

  window.addEventListener("message", async (event) => {
    if (event.data?.source === 'react-devtools-content-script' || 
        event.data?.source === 'react-devtools-bridge' ||
        event.origin === window.location.origin) {
      return;
    }

    if (!event.data || typeof event.data !== 'object' || Array.isArray(event.data)) {
      return;
    }

    if (event.origin && !event.origin.includes('trycloudflare.com') && !event.origin.includes('localhost')) {
      return;
    }

    if (!event.origin) {
      if (event.data.type === 'SHOP_PAGE_DATA' || event.data.type === 'DESIGNER_READY') {
      } else {
        return;
      }
    } else {
      if (!ALLOWED_ORIGINS.some(origin => event.origin.startsWith(origin))) {
        return;
      }
    }

    const { type, payload } = event.data || {};

    if (type === "SHOP_PAGE_DATA") {
      try {
        showLoading();
        
        const productPayload = {
          title: event.data.productName,
          price: event.data.price.toFixed(2),
          currency: event.data.currency,
          sku: `CUSTOM-${event.data.modelId}`,
          modelId: event.data.modelId,
          source: event.data.source,
          timestamp: event.data.timestamp,
          quantity: 1,
          properties: {}
        };

        const response = await fetch("/apps/designer/create-product", {
          method: "POST",
          headers: { "Content-Type": "application/json", "Accept": "application/json" },
          body: JSON.stringify(productPayload)
        });
        
        if (response.ok) {
          const { variantId, productId, handle } = await response.json();
          
          if (!variantId) {
            iframe.contentWindow.postMessage({ 
              type: "CART:ADD_ERROR", 
              payload: { error: "No variant ID returned from product creation" } 
            }, event.origin);
            return;
          }
          
          await new Promise(r => setTimeout(r, 1000));

          try {
            await addAndRenderDrawer({
              id: variantId,
              quantity: 1,
              properties: productPayload.properties
            });

            iframe.contentWindow.postMessage({
              type: "CART:ADD_SUCCESS",
              payload: {
                variantId,
                productId,
                modelId: event.data.modelId
              }
            }, event.origin);

            hideLoading();
          } catch (error) {
            iframe.contentWindow.postMessage({
              type: "CART:ADD_ERROR",
              payload: { error: "Failed to add to cart", details: error.message }
            }, event.origin);
            hideLoading();
          }
        } else {
          const errorText = await response.text();
          iframe.contentWindow.postMessage({ 
            type: "PRODUCT:CREATE_ERROR", 
            payload: { error: "Failed to create product", details: errorText } 
          }, event.origin);
          hideLoading();
        }
      } catch (error) {
        iframe.contentWindow.postMessage({ 
          type: "PRODUCT:CREATE_ERROR", 
          payload: { error: error.message } 
        }, event.origin);
        hideLoading();
      }
    }

    if (type === "PRODUCT:CREATE_AND_ADD") {
      try {
        showLoading();
        
        const response = await fetch("/apps/designer/create-product", {
          method: "POST",
          headers: { "Content-Type": "application/json", "Accept": "application/json" },
          body: JSON.stringify(payload)
        });
        
        if (response.ok) {
          const { variantId } = await response.json();

          try {
            await addAndRenderDrawer({
              id: variantId,
              quantity: payload.quantity || 1,
              properties: payload.properties || {}
            });

            iframe.contentWindow.postMessage({
              type: "CART:ADD_SUCCESS",
              payload: { variantId }
            }, event.origin);
            hideLoading();
          } catch (error) {
            iframe.contentWindow.postMessage({
              type: "CART:ADD_ERROR",
              payload: { error: "Failed to add to cart", details: error.message }
            }, event.origin);
            hideLoading();
          }
        } else {
          hideLoading();
        }
      } catch (error) {
        iframe.contentWindow.postMessage({ 
          type: "CART:ADD_ERROR", 
          payload: { error: error.message } 
        }, event.origin);
        hideLoading();
      }
    }

    if (type === "CART:ADD_VARIANT") {
      try {
        await addAndRenderDrawer({
          id: payload.variantId,
          quantity: payload.quantity || 1,
          properties: payload.properties || {}
        });

        iframe.contentWindow.postMessage({
          type: "CART:ADD_SUCCESS",
          payload: { variantId: payload.variantId }
        }, event.origin);
      } catch (error) {
        iframe.contentWindow.postMessage({
          type: "CART:ADD_ERROR",
          payload: { error: "Failed to add to cart", details: error.message }
        }, event.origin);
      }
    }
  });

  if (iframe) {
    iframe.addEventListener("load", () => {
      let targetOrigin = "*";
      try {
        targetOrigin = new URL(iframe.getAttribute('src') || '', window.location.href).origin;
      } catch (e) {
        targetOrigin = "*";
      }
      
      iframe.contentWindow.postMessage({ 
        type: "PARENT:READY" 
      }, targetOrigin);
    });
    
    iframe.addEventListener("error", (e) => {
    });
  }
})();
</script>

{% schema %}
{
  "name": "Pencil Designer Embed",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "iframe_src",
      "label": "Designer URL",
      "default": "https://designer.example.com/shop/sample-design"
    },
    {
      "type": "range",
      "id": "height",
      "label": "Height (px)",
      "min": 300,
      "max": 1000,
      "step": 50,
      "default": 600
    }
  ]
}
{% endschema %}
